---
- name: Resolve UniFi Controller install state
  block:
    - name: Populate service facts
      ansible.builtin.service_facts:

    - name: Debug 'ansible_facts.services'
      ansible.builtin.debug:
        var: ansible_facts.services
        verbosity: 3

    - name: Assert service status
      ansible.builtin.set_fact:
        service_exists: "{{ (ansible_facts.services is search('unifi')) | ternary ('true', 'false') }}"

    - name: Debug 'service_exists'
      ansible.builtin.debug:
        var: service_exists
        verbosity: 3
    
    - name: Get UniFi Controller path info
      ansible.builtin.stat:
        path: "{{ path }}"
      loop:
        - "{{ unifi_na_install_path }}"
        - "{{ unifi_na_data_path }}"
        - "{{ unifi_na_vanity_install_path }}"
        - "{{ unifi_na_working_data_path }}"
      loop_control:
        loop_var: path
      register: _path_info

    - name: Set 'path_info' variable containing UniFi Controller path stat output
      ansible.builtin.set_fact:
        path_info: "{{ _path_info.results | json_query('[*].{path: path, stat: stat}') }}"

    - name: Debug 'path_info'
      ansible.builtin.debug:
        var: path_info
        verbosity: 3

- name: Stop UniFi Controller service
  when: service_exists is true
  ansible.builtin.systemd:
    name: unifi.service
    state: stopped

- name: Unlink working data directory
  when: target_path_lnk is defined and target_path_lnk
  ansible.builtin.file:
    path: "{{ unifi_na_working_data_path }}"
    state: absent
  vars:
    target_path: "{{ unifi_na_working_data_path }}"
    target_path_lnk: "{{ path_info | json_query('[? path == `{{ target_path }}`].stat.islnk') }}"

- name: Unlink vanity install directory
  when: target_path_lnk is defined and target_path_lnk
  ansible.builtin.file:
    path: "{{ target_path }}"
    state: absent
  vars:
    target_path: "{{ unifi_na_vanity_install_path }}"
    target_path_lnk: "{{ path_info | json_query('[? path == `{{ target_path }}`].stat.islnk') }}"

- name: Create service account
  ansible.builtin.user:
    name: ubnt
    system: true

- name: Create temp working directory
  ansible.builtin.tempfile:
    state: directory
    suffix: "-unifi"
  register: _temp_dir

- name: Fetch and unarchive UniFi Controller source
  ansible.builtin.unarchive:
    src: "{{ unifi_na_src_url }}"
    dest: "{{ _temp_dir.path }}"
    remote_src: true
    owner: ubnt
    group: ubnt

- name: Copy systemd startup script
  when: service_exists is false
  ansible.builtin.copy:
    src: "{{ role_path }}/files/unifi.service"
    dest: "/etc/systemd/system/unifi.service"
    mode: 0744

- name: Get SELinux status
  ansible.builtin.stat:
    path: /etc/sysconfig/selinux
  register: _selinux_status

- name: Debug '_selinux_status'
  ansible.builtin.debug:
    var: _selinux_status
    verbosity: 3

- name: Set SELinux to permissive mode
  when: _selinux_status.stat.exists
  ansible.posix.selinux:
    policy: targeted
    state: permissive

- name: Get firewalld status
  ansible.builtin.stat:
    path: /etc/sysconfig/firewalld
  register: _firewalld_status
