---
# tasks file for unifi-controller
- name: Include OS-specific variables
  ansible.builtin.include_vars: '{{ ansible_os_family }}.yml'

# Setup/install tasks.
- name: Include OS-specific setup tasks
  include_tasks: 'setup-{{ ansible_os_family }}.yml'

- name: Check if SELinux is available
  ansible.builtin.stat:
    path: /etc/sysconfig/selinux
  register: _selinux_status

- name: Set SELinux to permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: _selinux_status.stat.exists

- name: Create service account
  ansible.builtin.user:
    name: ubnt
    system: yes

- name: Fetch and unarchive UniFi Controller source
  ansible.builtin.unarchive:
    creates: /opt/UniFi
    src: "http://dl.ubnt.com/unifi/{{ unifi_controller_version }}/UniFi.unix.zip"
    dest: /opt
    remote_src: yes
    owner: ubnt
    group: ubnt

- name: Copy systemd startup script
  ansible.builtin.copy:
    src: "{{ role_path }}/files/unifi.service"
    dest: /etc/systemd/system/unifi.service
    mode: 0744

- name: Check if firewalld is available
  ansible.builtin.stat:
    path: /etc/sysconfig/firewalld
  register: _firewalld_status

- name: Copy UniFi Controller firewalld config
  ansible.builtin.copy:
    src: "{{ role_path }}/files/unifi.xml"
    dest: /etc/firewalld/services/unifi.xml
    mode: 0744
  when: _firewalld_status.stat.exists
  notify: reload firewalld

- name: Restart firewalld and allow UniFi Controller traffic
  ansible.posix.firewalld:
    service: unifi
    permanent: true
    immediate: true
    zone: home
    state: enabled
  when: _firewalld_status.stat.exists
  ignore_errors: "{{ ansible_check_mode }}"

- name: Enable UniFi Controller system service
  ansible.builtin.systemd:
    name: unifi.service
    enabled: yes
    state: started